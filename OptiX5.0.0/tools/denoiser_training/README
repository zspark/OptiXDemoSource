Run training 

BEGINNERS 

This has to be started from scripts directory
All training data have to be converted to .npy before training can be performed.

1. python run.py

Default is 100 epochs which needs about 15 minutes on an Amazon instance with K80 to complete.
Can be changed by editing run.py and replace "num_epochs = 100" with a different numbers.
This creates a network with only RGB information.
For additional buffer information edit run.py and change the parameter INPUT_DIMENSIONS.

2. gen_layer ../result  [num_epochs] rgb

Creates the network from the intermediate Tensorflow files.
Intermediate results are written out every 10 epochs. So num_epochs must be a multiple of 10.
This can be changed in run.py by changing variable "save_interval".

3. final training files are called training_[num_epochs].bin

Intermediate and final files are written into ../result directory.

-----------------------------------------------------------------------
INTERMEDIATE


1. python run.py --help 

run.py [--help] [--dimension {3,6,9}] [--save e] [--train dir] [--result dir] [--epochs e] [--restore checkpointfile]
defaults: dimension=3, save=10, train=../training, result=../result, epochs=20, restore=none

--dimension {3,6,9}  
	3 is rgb only (default), 6 rgb+albedo,  9 rgb+albedo+normal
--save e
	write intermediate checkpoint files every e epochs

--train dir
	path to training input directory where rgb [albedo, normal] are stored
	
--result dir
	path to alternative result directory (directory must exist)

--epochs e
	total number of epochs

--restore checkpointfile
	use checkpointfile for continuation of training

2. to combine multiple networks in one training.bin file, use:

-----------------------------------------------------------------------
EXPERT 

To have a training.bin file that you can run with either just rgb input or rgb+albedo input or 
rgb+albedo+normal input, training has to be performed with all 3 dimensions. 
Intermediate checkpoint files have to be written into different result directories. Otherwise they 
will be overwritten (for example result_rgb, result_rgb-albedo, result_rgb-albedo-normal).

With the following command can be combined in one training file:

python parse_network.py training_rgb-albedo_$1.bin result_rgb/rgb_$1.pb rgb result_rgb-albedo/rgb-albedo_$1.pb rgb-albedo
